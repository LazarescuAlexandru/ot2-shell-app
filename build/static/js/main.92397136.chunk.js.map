{"version":3,"sources":["App.jsx","index.js"],"names":["authService","AuthService","clientId","process","authorizeEndpoint","tokenEndpoint","logoutEndpoint","redirectUri","scopes","App","useAuth","_useState","useState","_useState2","_slicedToArray","anchorEl","setAnchorEl","_useState3","_useState4","callResp","setCallResp","_useState5","_useState6","showSnackBar","setShowSnackBar","_useState7","_useState8","snackBarMessage","setSnackBarMessage","_useState9","_useState10","snackBarSeverity","setSnackBarSeverity","_useState11","_useState12","showBackdrop","setBackdrop","handleSnackBarClose","login","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","authorize","stop","apply","arguments","logout","_ref2","_callee2","shouldEndSession","_context2","_x","tokenRefreshPromise","undefined","tokenRefreshWaitCount","axios","interceptors","response","use","_ref3","_callee3","error","_error$response","config","_error$response2","_context3","status","sent","fetchToken","getAuthTokens","refresh_token","then","authTokens","access_token","headers","_objectSpread","Authorization","concat","console","log","Promise","reject","_x2","getLoggedInUserIcon","name","words","split","userIcon","charAt","length","stringToColor","string","i","hash","charCodeAt","color","toString","slice","logoutWithIdTokenHint","idToken","window","location","replace","encodeURIComponent","checkService","req","processRes","successMessage","replaceVals","shortUrl","url","method","res","outMessage","_res$data$replaceVals","RegExp","data","node","catch","err","_err$response","_err$response2","_err$message","_err$response3","_err$response3$data","_err$response4","_err$response4$data","_err$message2","_err$response5","_err$response6","_err$response6$status","_err$code","errObj","message","details","code","finally","runRequest","_res$data","useEffect","_jsxs","className","children","isPending","isAuthenticated","_jsx","src","alt","style","Stack","direction","sx","display","height","p","alignItems","justifyContent","ScreenshotMonitorIcon","Box","width","LinearProgress","CloudSyncIcon","Button","onClick","event","currentTarget","Avatar","getUser","bgcolor","Menu","anchorOrigin","vertical","horizontal","keepMounted","open","Boolean","onClose","MenuItem","id_token","Typography","variant","JSON","stringify","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Backdrop","zIndex","CircularProgress","Snackbar","autoHideDuration","action","React","IconButton","size","CloseIcon","fontSize","Alert","severity","map","text","index","WrappedSecuredApp","AuthProvider","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.92397136.chunk.js","sourcesContent":["import './style/App.scss';\n// import react libraries including those providing capabilities related to state management\nimport * as React from 'react';\n\nimport { useState } from \"react\";\n//FOR LOADING STUFF AT INIT\nimport { useEffect } from 'react';\n\n// import react libraries providing capabilities related to authentication using PKCE mechanism\nimport { AuthProvider, AuthService, useAuth } from 'react-oauth2-pkce';\n\n//FOR SENDING REST CALLS\nimport axios  from 'axios';\n\n\n\n// MUI components\nimport { Button,\n    Box,\n    Backdrop,\n    Stack,\n    CircularProgress,\n    LinearProgress,\n    IconButton,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Snackbar,\n    Alert,\n    Typography,\n    Menu, MenuItem\n  } from '@mui/material';\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport CloudSyncIcon from '@mui/icons-material/CloudSync';\nimport ScreenshotMonitorIcon from '@mui/icons-material/ScreenshotMonitor';\nimport Avatar from '@mui/material/Avatar';\n\n\n// create authentication service connected to CPS (note use of env variables)\nconst authService = new AuthService({\n    clientId:          process.env.REACT_APP_CLIENT_ID, \n    authorizeEndpoint:  process.env.REACT_APP_BASE_URL + '/tenants/' + process.env.REACT_APP_TENANT_ID + '/oauth2/auth',\n    tokenEndpoint:      process.env.REACT_APP_BASE_URL + '/tenants/' + process.env.REACT_APP_TENANT_ID + '/oauth2/token',\n    logoutEndpoint:     process.env.REACT_APP_BASE_URL + '/tenants/' + process.env.REACT_APP_TENANT_ID + '/oauth2/logout',\n    redirectUri:        process.env.REACT_APP_REDIRECT_URI,\n    scopes: ['openid']\n});\n\n// create a react app\nfunction App() { \n    // init auth service\n    const { authService } = useAuth();\n    // add state variables\n\n    //for the user menu\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    //to show the call response\n    const [callResp, setCallResp] = useState({});\n\n    //snackBar to show status\n    const [showSnackBar, setShowSnackBar] = useState(false);\n    const [snackBarMessage, setSnackBarMessage] = useState(\"\");\n    const [snackBarSeverity, setSnackBarSeverity] = useState(\"success\");\n\n    //to show when the service is called\n    const [showBackdrop, setBackdrop] = useState(false);\n\n\n    const handleSnackBarClose = () => {\n        setShowSnackBar(false);\n        setSnackBarMessage(\"\");\n      }\n    \n    // create login and logout methods\n    const login = async () => authService.authorize(); \n    const logout = async (shouldEndSession) => authService.logout(shouldEndSession); \n\n    // Promise that resolves when the acces_token is refreshed.\n    let tokenRefreshPromise = undefined;\n\n    // Count the number of pending requests that are waiting for a token refresh\n    let tokenRefreshWaitCount = 0;\n\n    // refresh the token if 401 \n    axios.interceptors.response.use(\n        (response) => response,\n        async (error) => {\n            const config = error?.config;\n    \n            if (error?.response?.status === 401 && !config?.sent) {\n                config.sent = true;\n                tokenRefreshWaitCount++;\n    \n                    if (tokenRefreshWaitCount === 1) {\n                        // Only create a new tokenRefreshPromise for the first 401 after the previous refresh.\n                        tokenRefreshPromise = authService.fetchToken(authService.getAuthTokens().refresh_token, true);\n                    }\n                    // Wait for the refreshed token before retrying.\n                    await tokenRefreshPromise.then((authTokens) => {\n                        if (authTokens.access_token) {\n                            config.headers = {\n                                ...config.headers,\n                                Authorization: `Bearer ${authTokens.access_token}`,\n                            };\n                        }\n                    });\n                \n                tokenRefreshWaitCount--;\n    \n        \n                \n                console.log(`Rerun request with status ${error?.response?.status}`)\n                return axios(config);\n                }\n            \n            return Promise.reject(error);\n        }\n    );\n\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    \n    const handleClickLogout = () => {\n        logoutWithIdTokenHint(true, authService.getAuthTokens().id_token);\n        setAnchorEl(null);\n    }\n\n    //creating a nice looking user menu with the user name\n    \n    const getLoggedInUserIcon = (name) => {\n        const words = name.split(\" \");\n        let userIcon = \"\";\n        userIcon += words[0].charAt(0);\n        if (words.length > 1) userIcon += words[words.length - 1].charAt(0);\n        else userIcon += words[0].charAt(1);\n        return userIcon;\n      };\n    \n    function stringToColor(string) {\n        let hash = 0;\n        let i;\n      \n        /* eslint-disable no-bitwise */\n        for (i = 0; i < string.length; i += 1) {\n          hash = string.charCodeAt(i) + ((hash << 5) - hash);\n        }\n      \n        let color = '#';\n      \n        for (i = 0; i < 3; i += 1) {\n          const value = (hash >> (i * 8)) & 0xff;\n          color += `00${value.toString(16)}`.slice(-2);\n        }\n        /* eslint-enable no-bitwise */\n      \n        return color;\n      }\n      \n      function stringAvatar(name) {\n        return {\n          sx: {\n            bgcolor: stringToColor(name),\n          },\n          children: getLoggedInUserIcon(name),\n        };\n      }  \n\n    // create method to for logout\n    const logoutWithIdTokenHint = (shouldEndSession, idToken) => {\n        logout(shouldEndSession);\n        window.location.replace(\n            process.env.REACT_APP_BASE_URL + \n            '/tenants/' + process.env.REACT_APP_TENANT_ID + \n            '/oauth2/logout?id_token_hint=' + \n            encodeURIComponent(idToken) + \n            '&post_logout_redirect_uri=' + encodeURIComponent(process.env.REACT_APP_REDIRECT_URI)\n        );\n    }\n\n    //the following function can be used across components to have one single place to log all calls\n    /*usage: \n        req - Axios request, \n        processRes - function to process the response, \n        successMessage - message to show in the snackbar when the outcome is success. If you need to add any variables to the success message from the response, add variables in the success message\n        replaceVals - array with objects to replace the variables in the response. Each object needs a name property and a node property\n    example:\n\n    let req = { \n      method: 'post', \n      data: {name: 'abc', description: 'def'},\n      url: `${process.env.REACT_APP_BASE_URL}/cms/`, \n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`} \n    };\n    runRequest(req, (res) => {\n            if (res.status==204) {\n                //do something\n            }\n        }, \n        `Successfully created index idxName`, \n        [{name: 'idxName', node: 'name'}]);\n    */\n\n    const runRequest = (req, processRes, successMessage, replaceVals) => {\n        setBackdrop(true);\n        let shortUrl = req.url.replace(/^[a-z]{4,5}:\\/{2}[^/]+(\\/.*)/, '$1');\n\t    console.log(\"\\nCall Sent\\n\"+req.method+\"\\n\"+shortUrl);\n        \n        axios(req)\n            .then(res => {\n                console.log(\"SUCCESS\"); \n                processRes(res);\n                //console.log(successMessage);\n                if (successMessage) {\n                    let outMessage=successMessage;\n                    if (replaceVals && replaceVals.length>0) {\n                        for (let i=0; i<replaceVals.length;i++) {\n                            outMessage = outMessage.replace(RegExp(replaceVals[i].name,'g'), res.data[replaceVals[i].node] ?? '');\n                        }\n                    }\n                    //console.log(outMessage);\n                    setSnackBarMessage(`${outMessage}`);\n                    setSnackBarSeverity('success');\n                    setShowSnackBar(true);\n                }\n                \n                      \n            })\n            .catch(err => { \n                console.log(\"ERROR running the call\");\n\t\t\t    console.log(err);\n                if (err.response?.status && err.response?.status===401) {\n                    // the token is invalid, we need to reauthenticate\n                    logout(true);\n                    login();\n                  }\n                var errObj = {\n                    status:(err.response && err.response.status)?err.response.status:-1,\n                    message: (err.response && err.response.data && err.response.data.details)?err.response.data.details:(err.message??'Error, please check the console log.')\n                }\n                processRes(errObj);\n                setSnackBarMessage(`${err.response?.data?.details ? err.response?.data?.details : (err.message??'Error, please check the console log.')}|Code: ${err.response?.status ? err.response?.status?.toString() : (err.code??'ERR')}`);\n                setSnackBarSeverity('error');\n                setShowSnackBar(true);\n             })\n            .finally(() => {\n                //you can add code to log the call\n                setBackdrop(false);\n              })\n      }\n    \n\n    const checkService = () => {\n        let req = { \n            method: 'get', \n            url: `${process.env.REACT_APP_BASE_URL}/cms/service`, \n            headers: { 'Authorization': `Bearer ${authService.getAuthTokens().access_token}`, 'Accept': '*/*' } \n        };\n        runRequest(req, (res) => {\n                setCallResp(res.data ?? {});\n            }, \n            `Successfully ran the /cms/service request.`, \n            []);\n \n    }\n\n\n     // ADD HOOK ALLOWING TO RUN CODE ONCE COMPONENT READY\n    useEffect(\n        () => {\n            console.log(\"Start app - checking token status\");  \n        if (authService.getAuthTokens().access_token) {\n            //console.log(authService.getUser());\n            console.log(\"Start app - checking service status\");\n            checkService()\n        }\n        // eslint-disable-next-line \n        },[]\n    );\n\n\n\n    // display app\n    return (\n        <div className=\"App\">\n            {(!authService.isPending() && authService.isAuthenticated()) && \n            <header className=\"page-header\">\n                <div className=\"logo\">\n                \n                </div>\n                <div  className=\"header-title\">\n                    <img\n                    src=\"./images/Opentext_LibraryApplication.svg\"\n                    alt=\"Opentext Shell Application\"\n                    />{\" \"}\n                    <img\n                    src=\"./images/powered_by.svg\"\n                    alt=\"Powered by OpenText Developer Cloud\"\n                    style={{ \"paddingLeft\": \"8px\", \"paddingTop\": \"8px\" }}\n                    />\n                </div>\n                {showBackdrop && <Stack direction=\"row\" sx={{display: 'flex',\n                    height: '100%',\n                    p: 0,\n                    alignItems: 'center',\n                    justifyContent: 'flex-start',}}>\n                        <ScreenshotMonitorIcon />\n                        <Box sx={{\n                        width: '30%'\n                        }}>\n                            <LinearProgress color=\"success\"/>\n                        </Box>\n                        <CloudSyncIcon />\n                </Stack>}\n                \n                \n                \n                <div className=\"header-menu\">\n                <Button\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleClick}\n                >\n                    <Avatar {...stringAvatar(authService.getUser().name.split(\"@\")[0])} />\n                </Button>\n                <Menu\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <MenuItem onClick={handleClickLogout}>Logout {authService.getUser().name.split(\"@\")[0]}</MenuItem>\n                    {/*authService.getUser().name.split(\"@\")[0]*/}\n                    {/*authService.getUser().preferred_username*/}\n                </Menu>\n                </div>\n            </header>}\n            \n            {(!authService.isPending() && authService.isAuthenticated()) && \n            <div className=\"page-content\">\n                      <Box >\n                        <Typography display=\"block\" variant='h4'>Welcome to the OT2 Shell Application. This can be a starting point for any OT2 - Powered web application.</Typography>\n                        <Typography display=\"block\" variant='h6'>Below is the REST call result.</Typography>\n                        <div><pre>{JSON.stringify(callResp, null, 2)}</pre></div>\n                      </Box>\n                    \n                  </div>}\n                  \n                  <Dialog\n                    open={(!authService.isPending() && !authService.isAuthenticated())} onClose={() => {}}>\n                    <DialogTitle>Login</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            You are not logged in. Click below to start the login process.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => { login(); }} variant=\"contained\" color=\"primary\">\n                            Login\n                        </Button>\n                    </DialogActions> \n                </Dialog>\n                \n                <Dialog\n                    open={authService.isPending()} onClose={() => {}}>\n                    <DialogTitle>Loading application...</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Authenticating...\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => { logout(true); login(); }} variant=\"contained\" color=\"primary\">\n                            Reset\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            \n                <Backdrop style={{ zIndex: 9999 }} open={false}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n\n            <Snackbar\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n              }}\n              open={showSnackBar}\n              autoHideDuration={5000}\n              onClose={handleSnackBarClose}\n              action={\n                <React.Fragment>\n                  <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleSnackBarClose}>\n                    <CloseIcon fontSize=\"small\" />\n                  </IconButton>\n                </React.Fragment>\n              }\n          >\n            <Alert onClose={handleSnackBarClose} severity={snackBarSeverity}>\n                {snackBarMessage.split('|').map((text, index) => (\n                    <Typography display=\"block\" key={'alert'+index}>{text}</Typography>\n                ))}\n              \n            </Alert>\n          </Snackbar>\n            \n        </div>\n    );\n}\n\n// add auth provider around app\nfunction WrappedSecuredApp() { \n     console.log('App init - wrapping authService');\n    if (authService.getAuthTokens().error) {\n        console.log('Auth service error: ' + authService.getAuthTokens().error);\n    }\n     \n    if (authService.getAuthTokens().error && (authService.getAuthTokens().error==='unauthorized' || authService.getAuthTokens().error==='invalid_request')) {\n        authService.authorize();\n    }\n    return (\n        <AuthProvider authService={authService} >\n            <App />\n        </AuthProvider>\n    );\n}\n\nexport default WrappedSecuredApp;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './style/index.scss';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n"],"sourceRoot":""}